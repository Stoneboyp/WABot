// scenarios/repair.ts
import { Bot } from "grammy";
import { MyContext } from "../types";
import { saveRepairRequest } from "../utils/saveRepairRequest";
import { resetSession } from "../utils/sessions";

export function setupRepairScenario(bot: Bot<MyContext>) {
  bot.hears("üõ†Ô∏è –†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏", async (ctx) => {
    ctx.session.scenario = "repair";
    ctx.session.step = "type";

    await ctx.reply("–ö–∞–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞?", {
      reply_markup: {
        keyboard: [["–ü—Ä–∏–Ω—Ç–µ—Ä/–ú–§–£"], ["–ö–æ–º–ø—å—é—Ç–µ—Ä"], ["–°–µ—Ä–≤–µ—Ä"], ["–î—Ä—É–≥–æ–µ"]],
        resize_keyboard: true,
      },
    });
  });
}

export async function handleRepairSteps(ctx: MyContext) {
  switch (ctx.session.step) {
    case "type":
      ctx.session.deviceType = ctx.message?.text || "";
      ctx.session.step = "problem";
      await ctx.reply("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:");
      break;

    case "problem":
      ctx.session.problem = ctx.message?.text || "";
      ctx.session.step = "contact";
      await ctx.reply("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:", {
        reply_markup: { remove_keyboard: true },
      });
      break;

    case "contact":
      await saveRepairRequest(ctx);
      await ctx.reply("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.");
      resetSession(ctx);
      break;
  }
}
