// core/handleIncomingMessage.ts
import { getAIResponse } from "../services/ai-service";
import { getChat, saveMessage } from "../chatStore";
import { broadcastAll, broadcastTo } from "../ws/socket-server";
import { sendMessageToClient } from "./message-bus";
import {
  sanitizeHistory,
  validateAIResponse,
  postProcessResponse,
  isPotentialServiceQuestion,
  fallbackResponse,
} from "./guardRails";
import { searchKnowledgeBase } from "../services/knowledge-base";
import logger from "../core/logger";
import { logSessionEvent } from "../core/sessionLogger";

interface HandleIncomingMessageOptions {
  chatId: string;
  platform: "telegram" | "whatsapp" | "other";
  userName: string;
  text: string;
  history?: { role: "user" | "assistant"; content: string; timestamp: Date }[];
}

export async function handleIncomingMessage({
  chatId,
  platform,
  userName,
  text,
  history = [],
}: HandleIncomingMessageOptions): Promise<void> {
  const now = new Date();

  // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  saveMessage(platform, chatId, userName, {
    role: "user",
    content: text,
    timestamp: now,
  });
  logger.info(`[${platform}:${chatId}] üí¨ –í—Ö–æ–¥—è—â–µ–µ: "${text}" –æ—Ç ${userName}`);

  logSessionEvent(chatId, platform, {
    type: "incoming_user_message",
    userName,
    content: text,
    timestamp: now.toISOString(),
  });

  console.log(`[INCOMING] [${platform}] ${chatId} <- ${text}`);

  // 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–∞—Ç
  const chat = getChat(platform, chatId);
  if (!chat) {
    console.warn(
      `[WARN] –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chatStore –ø–æ—Å–ª–µ saveMessage`
    );
    return;
  }

  // 3. –û–±–Ω–æ–≤–ª—è–µ–º lastMessage –∏ notification
  chat.lastMessage = text;
  chat.updatedAt = new Date();
  chat.notification = true;

  // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  broadcastTo("admin", "admin", {
    type: "chat_updated",
    payload: {
      chatId,
      platform,
      lastMessage: text,
      updatedAt: now.toISOString(),
      notification: true,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      userName: chat.userName,
      avatar: chat.avatar,
    },
  });

  // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç)
  broadcastTo(chatId, platform, {
    type: "new_message",
    payload: {
      sender: "user",
      content: text,
      timestamp: now.toISOString(),
      lastMessage: text,
    },
  });

  if (chat.mode === "operator") {
    logger.info(`[${platform}:${chatId}] üõë AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (operator mode)`);
    return;
  }

  try {
    const ctx = {
      from: { first_name: userName },
      session: { chatHistory: history },
    };

    // 1. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    const kbAnswer = await searchKnowledgeBase(text);

    if (kbAnswer) {
      logger.info(`[${platform}:${chatId}] üìö –û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π`);

      logSessionEvent(chatId, platform, {
        type: "kb_answer",
        content: kbAnswer,
        timestamp: new Date().toISOString(),
      });
      saveMessage(platform, chatId, "Bot", {
        role: "assistant",
        content: kbAnswer,
        timestamp: new Date(),
      });

      chat.lastMessage = kbAnswer;
      chat.updatedAt = new Date();

      broadcastTo("admin", "admin", {
        type: "chat_updated",
        payload: {
          chatId,
          platform,
          lastMessage: kbAnswer,
          updatedAt: new Date(),
          notification: true,
        },
      });

      await sendMessageToClient(platform, chatId, kbAnswer);
      broadcastTo(chatId, platform, {
        type: "new_message",
        payload: {
          sender: "bot",
          content: kbAnswer,
          timestamp: new Date(),
          lastMessage: kbAnswer,
        },
      });

      return;
    }

    // 2. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –∑–∞–ø—Ä–æ—Å —É—Å–ª—É–≥–∏, –Ω–æ KB –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –¥–∞—ë–º fallback
    if (isPotentialServiceQuestion(text)) {
      const fallback = fallbackResponse(text);
      logger.info(
        `[${platform}:${chatId}] üîô Fallback-–æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ`
      );

      logSessionEvent(chatId, platform, {
        type: "fallback",
        content: fallback,
        timestamp: new Date().toISOString(),
      });
      saveMessage(platform, chatId, "Bot", {
        role: "assistant",
        content: fallback,
        timestamp: new Date(),
      });

      chat.lastMessage = fallback;
      chat.updatedAt = new Date();

      broadcastTo("admin", "admin", {
        type: "chat_updated",
        payload: {
          chatId,
          platform,
          lastMessage: fallback,
          updatedAt: new Date(),
          notification: true,
        },
      });

      await sendMessageToClient(platform, chatId, fallback);
      broadcastTo(chatId, platform, {
        type: "new_message",
        payload: {
          sender: "bot",
          content: fallback,
          timestamp: new Date(),
          lastMessage: fallback,
        },
      });

      return;
    }

    // 3. –í—ã–∑—ã–≤–∞–µ–º AI –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—ã
    const filteredHistory = sanitizeHistory(ctx as any, kbAnswer);
    const aiRaw = await getAIResponse(
      { ...ctx, session: { chatHistory: filteredHistory } } as any,
      text,
      `–ö–ª–∏–µ–Ω—Ç: ${userName}`
    );
    const validated = validateAIResponse(aiRaw, kbAnswer);
    const finalResponse = postProcessResponse(validated);

    saveMessage(platform, chatId, "Bot", {
      role: "assistant",
      content: finalResponse,
      timestamp: new Date(),
    });

    chat.lastMessage = finalResponse;
    chat.updatedAt = new Date();

    broadcastTo("admin", "admin", {
      type: "chat_updated",
      payload: {
        chatId,
        platform,
        lastMessage: finalResponse,
        updatedAt: new Date(),
        notification: true,
      },
    });

    await sendMessageToClient(platform, chatId, finalResponse);
    broadcastTo(chatId, platform, {
      type: "new_message",
      payload: {
        sender: "bot",
        content: finalResponse,
        timestamp: new Date(),
        lastMessage: finalResponse,
      },
    });
    logger.info(`[${platform}:${chatId}] ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª: "${finalResponse}"`);

    logSessionEvent(chatId, platform, {
      type: "ai_answer",
      content: finalResponse,
      timestamp: new Date().toISOString(),
    });
  } catch (err) {
    logger.error(`[${platform}:${chatId}] ‚ùå –û—à–∏–±–∫–∞ AI: ${err}`);

    logSessionEvent(chatId, platform, {
      type: "error",
      error: err instanceof Error ? err.message : String(err),
      timestamp: new Date().toISOString(),
    });

    await sendMessageToClient(
      platform,
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    );
  }
}
