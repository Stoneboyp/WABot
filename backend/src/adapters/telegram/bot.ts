import dotenv from "dotenv";
dotenv.config();

import { Bot, session } from "grammy";
import { MyContext, SessionData } from "../../types";
import { getAIResponse } from "../../services/ai-service";
import { getChat, saveMessage } from "../../chatStore";
import { broadcastTo } from "../../ws/socket-server";

export const bot = new Bot<MyContext>(process.env.TG_TOKEN!);

bot.use(
  session({
    initial(): SessionData {
      return {
        chatHistory: [],
      };
    },
  })
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx: MyContext) => {
  if (!ctx.message?.text) return;
  if (!ctx.chat) return;

  const message = ctx.message.text;
  const from = ctx.from;
  const firstName = from?.first_name ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const lastName = from?.last_name ?? "";

  const chatId = ctx.chat.id.toString();
  const platform = "telegram";

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  ctx.session.chatHistory ||= [];
  ctx.session.chatHistory.push({
    role: "user",
    content: message,
    timestamp: new Date(),
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-—Å—Ç–æ—Ä–µ
  if (!ctx.from) return;
  saveMessage(
    platform,
    chatId,
    `${ctx.from.first_name || ""} ${ctx.from.last_name || ""}`,
    {
      role: "user",
      content: message,
      timestamp: new Date(),
    }
  );

  broadcastTo(chatId, {
    type: "new_message",
    payload: {
      sender: "user",
      content: message,
      timestamp: new Date(),
    },
  });

  // ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º AI
  const chat = getChat(platform, chatId);
  if (chat?.mode === "operator") {
    console.log(`üõë Chat ${chatId} –≤ —Ä–µ–∂–∏–º–µ operator ‚Äî AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç`);
    return;
  }

  // ü§ñ AI-—Ä–µ–∂–∏–º
  try {
    const response = await getAIResponse(
      ctx,
      message,
      `–ö–ª–∏–µ–Ω—Ç: ${firstName} ${lastName}`
    );

    await ctx.reply(response);

    broadcastTo(chatId, {
      type: "new_message",
      payload: {
        sender: "bot",
        content: response,
        timestamp: new Date(),
      },
    });
  } catch (err) {
    console.error("AI error:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
  }
});
