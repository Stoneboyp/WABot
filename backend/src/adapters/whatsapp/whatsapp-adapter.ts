//whatsapp-adapter.ts
import dotenv from "dotenv";
dotenv.config();

import { handleIncomingMessage } from "../../core/handleIncomingMessage";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Green API
import whatsAppClient from "@green-api/whatsapp-api-client";

const idInstance = process.env.WA_MANAGER_ID_INSTANCE!;
const apiTokenInstance = process.env.WA_API_TOKEN_INSTANCE!;
const BASE_URL = `https://api.green-api.com/waInstance${idInstance}`;

export async function initWhatsAppAdapter() {
  const restAPI = whatsAppClient.restAPI({
    idInstance,
    apiTokenInstance,
  });

  console.log("üì° WhatsApp polling loop started");

  // üîÅ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  while (true) {
    try {
      const response = await restAPI.webhookService.receiveNotification();

      if (!response) continue;

      const webhookBody = response.body;
      const receiptId = response.receiptId;
      console.log("üì• RAW webhook body:", JSON.stringify(webhookBody, null, 2));
      switch (webhookBody.typeWebhook) {
        case "incomingMessageReceived": {
          const type = webhookBody.messageData?.typeMessage;

          let msg: string | undefined;

          if (type === "textMessage") {
            msg = webhookBody.messageData.textMessageData?.textMessage;
          } else if (type === "extendedTextMessage") {
            msg = webhookBody.messageData.extendedTextMessageData?.text;
          } else {
            console.log(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${type}`);
          }

          const chatId = webhookBody.senderData?.chatId;
          const userName = webhookBody.senderData?.senderName || "WA User";

          console.log(
            `üì• –í—Ö–æ–¥—è—â–µ–µ WA —Å–æ–æ–±—â–µ–Ω–∏–µ: ${userName} (${chatId}): ${msg}`
          );

          if (msg && chatId) {
            await handleIncomingMessage({
              chatId,
              platform: "whatsapp",
              userName,
              text: msg,
              history: [],
            });
          }

          break;
        }

        case "stateInstanceChanged": {
          console.log(
            `üì∂ WhatsApp —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç–∞–Ω—Å–∞: ${webhookBody.stateInstance}`
          );
          break;
        }

        default: {
          console.log(
            "üì• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø webhook:",
            webhookBody.typeWebhook
          );
        }
      }

      // ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã API –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –µ–≥–æ —Å–Ω–æ–≤–∞
      await restAPI.webhookService.deleteNotification(receiptId);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ WhatsApp poll loop:", err);
      await new Promise((res) => setTimeout(res, 5000)); // –ü–∞—É–∑–∞ 5 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }
}

export async function sendWhatsAppMessage(chatId: string, text: string) {
  await fetch(`${BASE_URL}/SendMessage/${apiTokenInstance}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chatId, message: text }),
  });
}

//temp use pooling
// export async function handleWhatsAppWebhook(req: any, res: any) {
//   const body = req.body;
//   console.log("üì© WhatsApp webhook:", body);

//   if (body.messageData?.textMessageData) {
//     const chatId = body.senderData?.chatId;
//     const userName = body.senderData?.senderName || "WhatsApp User";
//     const text = body.messageData.textMessageData.textMessage;

//     if (chatId && text) {
//       await handleIncomingMessage({
//         chatId,
//         platform: "whatsapp",
//         userName,
//         text,
//         history: [], // –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –≤–Ω–µ–¥—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏
//       });
//     }
//   }

//   res.sendStatus(200);
// }
